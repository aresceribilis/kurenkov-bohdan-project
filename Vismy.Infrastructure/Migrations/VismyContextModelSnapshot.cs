// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vismy.Infrastructure.Context;

namespace Vismy.Infrastructure.Migrations
{
    [DbContext(typeof(VismyContext))]
    partial class VismyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "eb6894bb-9880-4a58-a2d5-d2f3ecda15af",
                            ConcurrencyStamp = "dfd78f85-393d-4d62-8cd9-8414f4e687d0",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "e5f2afd0-e813-4823-8eed-ef4396ae0c7b",
                            ConcurrencyStamp = "7effe6a0-6a0c-4ca5-8173-4eda1b42891a",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "d8d5b22c-0c1e-49e4-a2ef-17aa9385ec41",
                            ConcurrencyStamp = "475d1e32-0387-4e2c-a3be-a83b222900f9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostStatusId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post_StatusId");

                    b.Property<int>("Shared")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostStatusId" }, "IX_Posts_Post_StatusId");

                    b.HasIndex(new[] { "UserId" }, "IX_Posts_UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportStatusId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Report_StatusId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "IX_Reports_PostId");

                    b.HasIndex(new[] { "ReportStatusId" }, "IX_Reports_Report_StatusId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex(new[] { "TagId" }, "IX_Post_Tag_TagId");

                    b.ToTable("Post_Tag");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserPost", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPostStatusId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_Post_StatusId");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex(new[] { "PostId" }, "IX_User_Post_PostId");

                    b.HasIndex(new[] { "UserPostStatusId" }, "IX_User_Post_User_Post_StatusId");

                    b.ToTable("User_Post");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserReportAuthor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ReportId");

                    b.HasIndex(new[] { "ReportId" }, "IX_User_Report_Author_ReportId");

                    b.ToTable("User_Report_Author");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserReportModerator", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserReportModeratorStatusId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_Report_Moderator_StatusId");

                    b.HasKey("UserId", "ReportId");

                    b.HasIndex(new[] { "ReportId" }, "IX_User_Report_Moderator_ReportId");

                    b.HasIndex(new[] { "UserReportModeratorStatusId" }, "IX_User_Report_Moderator_User_Report_Moderator_StatusId");

                    b.ToTable("User_Report_Moderator");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex(new[] { "FollowerId" }, "IX_User_User_FollowerId");

                    b.ToTable("User_User");
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.PostStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Post_Status");

                    b.HasData(
                        new
                        {
                            Id = "fdbd2f91-75e0-4105-9758-308b6bc72a56",
                            Description = "None",
                            Name = "None"
                        },
                        new
                        {
                            Id = "b205d35c-cb73-4c10-b218-7ea5ba7efa1e",
                            Description = "Hidden",
                            Name = "Hidden"
                        },
                        new
                        {
                            Id = "81533aef-7319-45b7-8c31-bf251634c240",
                            Description = "Frozen",
                            Name = "Frozen"
                        },
                        new
                        {
                            Id = "7d56567d-c59d-41eb-9149-68e3a46c92d0",
                            Description = "Removed",
                            Name = "Removed"
                        });
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.ReportStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Report_Status");

                    b.HasData(
                        new
                        {
                            Id = "f720645b-08b0-454f-83d1-80f8303a6977",
                            Description = "Violence",
                            Name = "Violence"
                        },
                        new
                        {
                            Id = "81fbfaea-cd48-4ff9-87ff-456e6721db86",
                            Description = "Sexual content",
                            Name = "Sexual content"
                        },
                        new
                        {
                            Id = "a9de91b7-bdd3-4ad9-b39f-943ea20b8e17",
                            Description = "Bullying",
                            Name = "Bullying"
                        },
                        new
                        {
                            Id = "ba60780d-d69d-401c-9afa-085d6b87baac",
                            Description = "Drugs",
                            Name = "Drugs"
                        });
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.UserPostStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User_Post_Status");

                    b.HasData(
                        new
                        {
                            Id = "090891bd-e809-4b87-ae04-940e029f2fdb",
                            Description = "View shows you viewed the post before.",
                            Name = "Viewed"
                        },
                        new
                        {
                            Id = "797de4fa-241d-4d25-b719-a8e644500f24",
                            Description = "Like shows you appreciate the post.",
                            Name = "Liked"
                        });
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.UserReportModeratorStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User_Report_Moderator_Status");

                    b.HasData(
                        new
                        {
                            Id = "0ec0712a-701e-4188-b06b-f8394e1129e5",
                            Description = "Approved",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = "751c1269-5e8a-4f05-a269-bc51c1267e45",
                            Description = "Disapproved",
                            Name = "Disapproved"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Post", b =>
                {
                    b.HasOne("Vismy.Core.Models.Statuses.PostStatus", "PostStatus")
                        .WithMany("Posts")
                        .HasForeignKey("PostStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PostStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Report", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vismy.Core.Models.Statuses.ReportStatus", "ReportStatus")
                        .WithMany("Reports")
                        .HasForeignKey("ReportStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");

                    b.Navigation("ReportStatus");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.PostTag", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Implementations.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserPost", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.Post", "Post")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Statuses.UserPostStatus", "UserPostStatus")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserPostStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");

                    b.Navigation("User");

                    b.Navigation("UserPostStatus");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserReportAuthor", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.Report", "Report")
                        .WithMany("UserReportAuthors")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", "User")
                        .WithMany("UserReportAuthors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserReportModerator", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.Report", "Report")
                        .WithMany("UserReportModerators")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", "User")
                        .WithMany("UserReportModerators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Statuses.UserReportModeratorStatus", "UserReportModeratorStatus")
                        .WithMany("UserReportModerators")
                        .HasForeignKey("UserReportModeratorStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Report");

                    b.Navigation("User");

                    b.Navigation("UserReportModeratorStatus");
                });

            modelBuilder.Entity("Vismy.Core.Models.Joins.UserUser", b =>
                {
                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", "Follower")
                        .WithMany("UserUserFollowers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Vismy.Core.Models.Implementations.AspNetUser", "User")
                        .WithMany("UserUserUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.AspNetUser", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("UserPosts");

                    b.Navigation("UserReportAuthors");

                    b.Navigation("UserReportModerators");

                    b.Navigation("UserUserFollowers");

                    b.Navigation("UserUserUsers");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Post", b =>
                {
                    b.Navigation("PostTags");

                    b.Navigation("Reports");

                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Report", b =>
                {
                    b.Navigation("UserReportAuthors");

                    b.Navigation("UserReportModerators");
                });

            modelBuilder.Entity("Vismy.Core.Models.Implementations.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.PostStatus", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.ReportStatus", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.UserPostStatus", b =>
                {
                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("Vismy.Core.Models.Statuses.UserReportModeratorStatus", b =>
                {
                    b.Navigation("UserReportModerators");
                });
#pragma warning restore 612, 618
        }
    }
}
